import type { Metadata } from "next";
import { Barlow } from "next/font/google";
import "./globals.css";
import { getThemeConfigs } from "./actions";
import { convertCssVariables, getFontUrl } from "@/lib/utils";
import { find } from "lodash";
const font = Barlow({
  subsets: ["latin"],
  weight: ["400", "500", "600", "700", "800"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const themeConfigs = await getThemeConfigs();

  const root = themeConfigs.object_config.root;

  const childrenSettings =
    themeConfigs.object_config.theme_settings.children_items;

  const customCss = find(childrenSettings, { id: "customizing_css" }).settings;

  const color = find(childrenSettings, { id: "color" }).settings;

  const typographyConfig = find(childrenSettings, {
    id: "typography",
  }).children_items;

  const {
    settings: { font_url },
  } = find(childrenSettings, {
    id: "typography",
  });

  const headingStyle = find(typographyConfig, {
    id: "style_heading",
  }).settings;

  const bodyStyle = find(typographyConfig, { id: "style_body" }).settings;

  const btnNLinkStyle = find(typographyConfig, {
    id: "style_button_link",
  }).settings;

  return (
    <html lang="en" suppressHydrationWarning className="text-base font-body">
      <head>
        <link href={getFontUrl(font_url.value) ?? ""} rel="stylesheet" />
      </head>
      <body className={font.className}>
        <style
          dangerouslySetInnerHTML={{
            __html: convertCssVariables(customCss?.style_dk?.value || ""),
          }}
        ></style>
        <style
          dangerouslySetInnerHTML={{ __html: convertCssVariables(root) }}
        ></style>
        <style>{`
        :root {
          --color-border: #e3e3e3;
          --color-primary: ${color.primary_color.value};
          --heading-text-color: ${color.heading_text_color.value};
          --body-text-color: ${color.body_text_color.value};
          --button-text-color: ${color.button_text_color.value};
          --button-background-color: ${color.button_color.value};
          --button-background-color-hover: ${color.button_color_hover.value};

          --font-family-heading: ${unescape(headingStyle.font_family.value)};
          --font-size-heading: ${headingStyle.font_base_size.value}px;
          --font-variant-heading: ${headingStyle.font_variant.value};

          --font-family-body: ${unescape(bodyStyle.font_family.value)};
          --font-size-body: ${bodyStyle.font_base_size.value}px;
          --font-variant-body: ${bodyStyle.font_variant.value};

          --font-family-button-link: ${btnNLinkStyle.font_family.value};
          --font-size-button-link: ${btnNLinkStyle.font_base_size.value}px;
          --font-variant-button-link: ${btnNLinkStyle.font_variant.value};
        }
        `}</style>
        {children}
      </body>
    </html>
  );
}
